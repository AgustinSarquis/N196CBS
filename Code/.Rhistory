<<<<<<< HEAD
=======
))
}
forestvalues <- forestmodel(t)
View(forestvalues)
# Now imagine all trees are harvested at once and turned into biochar
# We use Eucalyptus grandis aboveground carbon from the forest model at year 60
AGC60=forestvalues$TAGB[60]
# biochar yield % from wood (Sahoo et al. 2021)
yield=mean(c(0.20, 0.065, 0.13, 0.21))
# biochar fixed carbon % (Sahoo et al. 2021)
biocharC=mean(c(0.76, 0.89, 0.58, 0.83))
biochartotal=AGC60*yield*biocharC
# Now imagine all trees are harvested at once and turned into biochar
# We use Eucalyptus grandis aboveground carbon from the forest model at year 60
# and convert to biomass using 48.2 % Eucalyptus wood C content (Ryan et al. 2004)
AGC60=forestvalues$TAGB[60]/0.482
# Now imagine all trees are harvested at once and turned into biochar
# We use Eucalyptus grandis aboveground carbon from the forest model at year 60
# and convert to biomass using 48.2 % Eucalyptus wood C content (Ryan et al. 2004)
AGB60=forestvalues$TAGB[60]/0.482
biochartotal=AGB60*yield*biocharC
library(SoilR)
# This is a simulation of soil organic C dynamics in a Eucalyptus plantation from the model proposed in Crow et al. 2015.
# The simulated forest is 60 years old, so we run the simulation starting 60 years from 2025, until 2100
t=seq(1965:2100)
# We define the matrix of parameters where the diagonal parameters are the decomposition constants for each pool,
# and the rest are coefficients of transference from one pool to another.
# This model has 5 pools defined from fractionation techniques in the publication.
A=matrix(c(-0.135, 0, 0, 0.135*0.9958, 0,
0, -0.0033, 0, 0, 0.0033*0.8433,
0, 0, -0.008, 0, 0.008*0.0277,
0, 0, 0, -0.0032, 0,
0, 0, 0, 0, -0.001), nrow=5)
# This is the SOC stock in Eucalyptus plantations in tons ha-1 up to 1 m (from Reeves 2012 thesis)
SOC=593
# This is the total SOC % up to 15 cm (Crow et al. 2015)
OC=sum(0.52, 3.07, 1.6, 8.36, 2.54)
# This is the proportion of organic C per pool
pools=c(0.52/OC, 3.07/OC, 1.6/OC, 8.36/OC, 2.54/OC)
# These are the stocks of SOC per pool
ivList=pools*SOC
# These are the C input fluxes in tons C ha-1 y-1
# Giardina et al. 2014 proposed a flux of 15.5 Mg C ha-1 y-1 up to 91.5 cm from plants to soils
inputs=2.7+12.4+0.4
# Multiplied by the proportion that enters each pool (from Crow et al. 2015) we get inputs per pool
inputFluxes=c(inputs*0.9184, inputs*0.0045, inputs*0.0755, 0, 0)
# The model
soilmodel=Model(t, A, ivList, inputFluxes)
# Get stocks dynamics
Ct=cbind(rowSums(getC(soilmodel)),getC(soilmodel))
getC(soilmodel)[60,]
sum(getC(soilmodel)[60,])
# the maximum biochar application threshold in Wang et al. (2016) is 20 % of SOC (CAN BE IMPROVED: maybe more?)
sum(getC(soilmodel)[60,])*0.2
# wood density from Krisnawati et al. 2011
wooddensities=c(230, 310, 330, 440, 490) # (kg/m3)
wooddensities=c(wooddensities, mean(wooddensities))/1000 # divide by 1000 because in the model it is in g/cm3
wooddensities
library(SoilR)
# This is a simulation of soil organic C dynamics in a Eucalyptus plantation from the model proposed in Crow et al. 2015.
# The simulated forest is 60 years old, so we run the simulation starting 60 years from 2025, until 2100
t=seq(1965:2100)
# We define the matrix of parameters where the diagonal parameters are the decomposition constants for each pool,
# and the rest are coefficients of transference from one pool to another.
# This model has 5 pools defined from fractionation techniques in the publication.
A=matrix(c(-0.135, 0, 0, 0.135*0.9958, 0,
0, -0.0033, 0, 0, 0.0033*0.8433,
0, 0, -0.008, 0, 0.008*0.0277,
0, 0, 0, -0.0032, 0,
0, 0, 0, 0, -0.001), nrow=5)
# This is the SOC stock in Eucalyptus plantations in tons ha-1 up to 1 m (from Reeves 2012 thesis)
SOC=593
# This is the total SOC % up to 15 cm (Crow et al. 2015)
OC=sum(0.52, 3.07, 1.6, 8.36, 2.54)
# This is the proportion of organic C per pool
pools=c(0.52/OC, 3.07/OC, 1.6/OC, 8.36/OC, 2.54/OC)
# These are the stocks of SOC per pool
ivList=pools*SOC
# These are the C input fluxes in tons C ha-1 y-1
# Giardina et al. 2014 proposed a flux of 15.5 Mg C ha-1 y-1 up to 91.5 cm from plants to soils
inputs=2.7+12.4+0.4
# Multiplied by the proportion that enters each pool (from Crow et al. 2015) we get inputs per pool
>>>>>>> c3aeabdf96866dbc1155121c4da81f5a3bf5be6f
inputFluxes=c(inputs*0.9184, inputs*0.0045, inputs*0.0755, 0, 0)
# The model
soilmodel=Model(t, A, ivList, inputFluxes)
# Get stocks dynamics
Ct=cbind(rowSums(getC(soilmodel)),getC(soilmodel))
# Imagine a scenario where the Eucalyptus plantation is harvested to make biochar which is applied to the soil on site
# The Eucalytpus are then replaced by Pakukui agroforestry
# this simulation starts in 2025, so it's only 76 years
tb=seq(2025:2100)
# biochar yield % from wood (Sahoo et al. 2021)
yield=mean(c(0.20, 0.065, 0.13, 0.21))
# biochar fixed carbon % (Sahoo et al. 2021)
biocharC=mean(c(0.76, 0.89, 0.58, 0.83))
# Now imagine all trees are harvested at once and turned into biochar
# We use Eucalyptus grandis aboveground carbon from the forest model at year 60
# and convert to biomass using 48.2 % Eucalyptus wood C content (Ryan et al. 2004)
AGB60=forestvalues$TAGB[60]/0.482
biochartotal=AGB60*yield*biocharC
# the maximum biochar application threshold in Wang et al. (2016) is 20 % of SOC (CAN BE IMPROVED: maybe more?)
# considering soil C at year 60 in the BaU model, that value would be:
sum(getC(soilmodel)[60,])*0.2
# BUSINESS AS USUAL SCENARIO
# The simulated forest is 60 years old, so we run the simulation starting 60 years from 2025, until 2100
t=seq(1965:2100)
# We use data from Eucalyptus plantations in Hawai'i
AGB=337.6 # aboveground biomass carbon (tons ha-1) lidar data obtained by Hayley
BGB=mean(c(22.4, 66)) # belowground biomass carbon (tons ha-1) averaged from Reeves 2012 thesis and Selments et al. 2017
DM=12 # litter carbon (tons ha-1) from Selments et al. 2017
# Forest model from Sierra et al. 2012 without the soil compartment adjusted to Hawai'i data
# CAN BE IMPROVED: NEED A EUCALYPTUS GROWTH MODEL
forestmodel <- function(t) {
TAGB <- AGB * (1 - exp(-0.064 * t))^1.964
TBB <- BGB * (1 - exp(-0.022 * t))^0.897
TDM <- DM / (1 + 2.363 * exp(-0.062 * t))
TCS <- TAGB + TBB + TDM
return(data.frame(
t = t,
TAGB = TAGB,
TBB = TBB,
TDM = TDM,
TCS = TCS
))
}
forestvalues <- forestmodel(t)
# Imagine Eucalyptus are cleared and turned into biochar (see script soilmodel.R)
# In that place, Kukui (Aleurites moluccanus) are planted as an agroforestry management
# CAN BE IMPROVED: could try different belowground models. Also, lacking dead biomass model. Also, Kukui C content
kukuimodel <- function(t, d) {
DBH <- -9.021135 + 16.757157 * log(t) # from Lincoln 2023 (in cm)
HEIGHT <- -3.635323 + 8.5568025 * log(t) # from Lincoln 2023 (in m)
AGB <- 0.0673 * (d*DBH^2*HEIGHT)^0.976  # from Chave et al. 2014 (in kg/ha)
BGB =   0.016*DBH^2.597  # From Waring & Powers 2017 (in kg/ha) CAN BE IMPROVED
TCS = (AGB + BGB)*0.45 # convert to carbon (standard placeholder for now)
return(data.frame(
t = t,
DBH = DBH,
HEIGHT = HEIGHT,
AGB = AGB/1000, # convert to Mg from kg
BGB = BGB/1000,
TCS = TCS/1000
))
}
# wood density from Krisnawati et al. 2011
wooddensities=c(230, 310, 330, 440, 490) # (kg/m3)
wooddensities=c(wooddensities, mean(wooddensities))/1000 # divide by 1000 because in the model it is in g/cm3
# this simulation starts in 2025, so it's only 76 years
tb=seq(2025:2100)
kukuivalues = lapply(wooddensities, function (density) kukuimodel(tb, density))
# Plot the results for different values of wood density (as a sensitivity analysis)
matplot(tb,kukuivalues[[6]]$AGB, type="l", lty=1,lwd=3,
ylab="Aboveground biomass carbon (Mg/ha)", xlab="Time (years)")
# Now imagine all trees are harvested at once and turned into biochar
# We use Eucalyptus grandis aboveground carbon from the forest model at year 60
# and convert to biomass using 48.2 % Eucalyptus wood C content (Ryan et al. 2004)
AGB60=forestvalues$TAGB[60]/0.482
biochartotal=AGB60*yield*biocharC
# the maximum biochar application threshold in Wang et al. (2016) is 20 % of SOC (CAN BE IMPROVED: maybe more?)
# considering soil C at year 60 in the BaU model, that value would be:
sum(getC(soilmodel)[60,])*0.2
# we can then apply all the biochar since it's below the threshold
# new soil model with a new pool that represents a single application of biochar (decay rate from Wang et al. 2016)
# this assumes that changing the vegetation and applying biochar does not change the behavior of the soil.
# CAN BE IMPROVED!
Ab=matrix(c(-0.135, 0, 0, 0.135*0.9958, 0, 0,
0, -0.0033, 0, 0, 0.0033*0.8433, 0,
0, 0, -0.008, 0, 0.008*0.0277, 0,
0, 0, 0, -0.0032, 0, 0,
0, 0, 0, 0, -0.001, 0,
0, 0, 0, 0, 0, -0.004), nrow=6)
# since this simulation starts 60 years after the previous one, we use those stocks at year 60 as initial conditions for this, plus biochar
ivListb=c(getC(soilmodel)[60,],biochartotal)
# FOR NOW KUKUI INPUTS ARE EQUAL TO EUCALYPTUS', BUT CAN BE IMPROVED
inputFluxesb=c(inputFluxes,0)
soilmodelb=Model(tb, Ab, ivListb, inputFluxesb)
# Let's get the entire ecosystem C dynamics from the soil and forest models to compute CS and CBS
TEC=as.data.frame(cbind(t=2025:2100,
BAU=forestvalues$TCS[61:136]+Ct[61:136,1],
Utopy= c(0,na.omit(kukuivalues[[6]]$TCS))+Ctb[,1]
))
Ctb=cbind(rowSums(getC(soilmodelb)),getC(soilmodelb))
# Let's get the entire ecosystem C dynamics from the soil and forest models to compute CS and CBS
TEC=as.data.frame(cbind(t=2025:2100,
BAU=forestvalues$TCS[61:136]+Ct[61:136,1],
Utopy= c(0,na.omit(kukuivalues[[6]]$TCS))+Ctb[,1]
))
View(TEC)
# Plot the results
matplot(TEC$t,TEC[,c(2,3)], type="l", lty=1,lwd=3, col=c(4,7),
ylab="Carbon stocks (Mg C/ha)", xlab="Year")
write.csv(TEC, 'C:/Users/asarq/Documents/GitHub/N196CBS/Data/TEC.csv')
# Plot the results
matplot(TEC$t,TEC[,c(2,3)], type="l", lty=1,lwd=3, col=c(4,7),
ylab="Carbon stocks (Mg C/ha)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c(4,7), lwd=3, bty="n")
polygon(c(TEC$t, rev(TEC$t)), c(TEC[,2], rep(0, length(TEC[,2]))),
density = 20, angle = 45, border = NA, col = 4)
polygon(c(TEC$t, rev(TEC$t)), c(TEC[,3], rep(0, length(TEC[,3]))),
density = 20, angle = 135, border = NA, col = 7)
# Plot the results
matplot(TEC$t,TEC[,c(2,3)], type="l", lty=1,lwd=3, col=c(4,7), ylim = c(0,2600),
ylab="Carbon stocks (Mg C/ha)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c(4,7), lwd=3, bty="n")
polygon(c(TEC$t, rev(TEC$t)), c(TEC[,2], rep(0, length(TEC[,2]))),
density = 20, angle = 45, border = NA, col = 4)
polygon(c(TEC$t, rev(TEC$t)), c(TEC[,3], rep(0, length(TEC[,3]))),
density = 20, angle = 135, border = NA, col = 7)
# Plot the results
matplot(TEC$t,TEC[,c(2,3)], type="l", lty=1,lwd=3, col=c(4,7), ylim = c(0,2600),
ylab="Carbon stocks (Mg C/ha)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c(4,7), lwd=3, bty="n")
# Plot the results
matplot(TEC$t,TEC[,c(2,3)], type="l", lty=1,lwd=3, col=c('#ff6b35','#53c98b'), ylim = c(0,2600),
ylab="Carbon stocks (Mg C/ha)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c('#ff6b35','#53c98b'), lwd=3, bty="n")
# Compute Carbon Sequestration (CS) as the area under the curves at the end of the simulation (year 2100)
# For the business as usual scenario
t0=2025
tf=2100
# function to get CS for specific time horizons
CS=function(x,y, t){integrate(splinefun(x, y), lower=t0, upper=t)$value}
# CS for year 1 to 76 (years 2025 to 2100)
CSt1=unlist(sapply(TEC$t, FUN=CS, x=TEC$t, y=TEC$BAU))
CSt2=unlist(sapply(TEC$t, FUN=CS, x=TEC$t, y=TEC$Utopy))
CSdf=as.data.frame(cbind(year=TEC$t, CSt1, CSt2))
matplot(CSdf$year,CSdf[,c(2,3)], type="l", lty=1,lwd=3, col=c(4,7),
ylab="Carbon Sequestration (Mg C/ha y)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui Agroforestry"),lty=1,col=c(4,7), lwd=3, bty="n")
matplot(CSdf$year,CSdf[,c(2,3)], type="l", lty=1,lwd=3, col=c('#ff6b35','#53c98b'),
ylab="Carbon Sequestration (Mg C/ha y)", xlab="Year")
legend("topleft",c("Eucalyptus plantation", "Pakukui Agroforestry"),lty=1,col=c('#ff6b35','#53c98b'), lwd=3, bty="n")
# Impulse response function modified after Millar et al. 2017
IRF_PD100=Vectorize(function(x){IRF_func(x, a0=0, as=c(0.2173,0.2240, 0.2824, 0.2763), tau=c(1000000,394.4, 36.54, 4.304))})
# convolution between the impulse response function of atmospheric CO2 and the carbon returning from ecosystems to the atmosphere
convolutionfun=function(t, t0=0, f, g){
function(t){integrate(function(u,t){f(t-u)*g(u)}, lower=t0, upper=t, t)$value}
}
# CBS function
CBSfun=function(TH, t0, kCO2, ha, smrfun){
smrfun=Vectorize(smrfun)
cv=convolutionfun(t, f=ha, g=smrfun,t0=t0)
cv=Vectorize(cv)
function(TH){-kCO2*(integrate(cv,lower=t0,upper=TH)$value)}
}
# For the business as usual scenario
smr1=splinefun(TEC$t, c(0,diff(TEC$BAU)))
CBS_Tr_fun=CBSfun(TH=TEC$t,t0,kCO2 = RE1Mg, ha=IRF_PD100, smrfun = smr1)
CBS_Tr1<-sapply(TEC$t, FUN=CBS_Tr_fun)
# Now calculate CBS (Climate Benefit of Sequestration)
# Radiative efficiency of one MgC in W m-2 (from Joos et al. 2013)
RE1Mg=5.35*(1/389)*(1/2.123e9)
CBS_Tr_fun=CBSfun(TH=TEC$t,t0,kCO2 = RE1Mg, ha=IRF_PD100, smrfun = smr1)
CBS_Tr1<-sapply(TEC$t, FUN=CBS_Tr_fun)
# Impulse response function (eq. 2 in Sierra et al. 2021), fate of C entering the atmosphere
IRF_func=function(t, a0, as, tau){
a0+sum(as*exp(-t/tau))
}
# Impulse response function modified after Millar et al. 2017
IRF_PD100=Vectorize(function(x){IRF_func(x, a0=0, as=c(0.2173,0.2240, 0.2824, 0.2763), tau=c(1000000,394.4, 36.54, 4.304))})
# convolution between the impulse response function of atmospheric CO2 and the carbon returning from ecosystems to the atmosphere
convolutionfun=function(t, t0=0, f, g){
function(t){integrate(function(u,t){f(t-u)*g(u)}, lower=t0, upper=t, t)$value}
}
# CBS function
CBSfun=function(TH, t0, kCO2, ha, smrfun){
smrfun=Vectorize(smrfun)
cv=convolutionfun(t, f=ha, g=smrfun,t0=t0)
cv=Vectorize(cv)
function(TH){-kCO2*(integrate(cv,lower=t0,upper=TH)$value)}
}
# For the business as usual scenario
smr1=splinefun(TEC$t, c(0,diff(TEC$BAU)))
CBS_Tr_fun=CBSfun(TH=TEC$t,t0,kCO2 = RE1Mg, ha=IRF_PD100, smrfun = smr1)
CBS_Tr1<-sapply(TEC$t, FUN=CBS_Tr_fun)
# For the utopian scenario
# t=0 represents emissions from clearing eucalyptus and biochar production
# this includes emissions from fuel calculated by Darshi
# COULD BE IMPROVED: it doesn't include CO2 equivalents
fuelC=-0.0297 # C Mg ha-1 (one time emission)
# and also includes the C lost during biochar production calculated from biochar efficiency (eucClost)
eucClost=-(1-yield)*AGC60
# and also includes the C lost during biochar production calculated from biochar efficiency (eucClost)
eucClost=-(1-yield)*AGB60*0.482
# and also includes the C lost during biochar production calculated from biochar efficiency (eucClost)
eucClost=-(1-yield)*AGB60*0.482 # convert Eucalyptus biomass back to C
smr2=splinefun(TEC$t, c(fuelC+eucClost,diff(TEC$Utopy)))
CBS_Tr_fun=CBSfun(TH=TEC$t,t0,kCO2 = RE1Mg, ha=IRF_PD100, smrfun = smr2)
CBS_Tr2<-sapply(TEC$t, FUN=CBS_Tr_fun)
# plot
plot(TEC$t,CBS_Tr1,type="l",col = 4, lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
lines(TEC$t,CBS_Tr2,col=7,lwd=3)
abline(0, 0, lty='dashed')
legend("bottomleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c(4,7), lwd=3, bty="n")
# plot
plot(TEC$t,CBS_Tr1,type="l",col = '#ff6b35', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
lines(TEC$t,CBS_Tr2,col='#53c98b',lwd=3)
abline(0, 0, lty='dashed')
legend("bottomleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c('#ff6b35','#53c98b'), lwd=3, bty="n")
plot(TEC$t,CBS_Tr1-CBS_Tr2,type="l",col = '#ff6b35', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
plot(TEC$t,CBS_Tr1+CBS_Tr2,type="l",col = '#ff6b35', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
diff(CBS_Tr1,CBS_Tr2)
plot(TEC$t,abs(CBS_Tr1-CBS_Tr2),type="l",col = '#ff6b35', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
abline(0, 0, lty='dashed')
# plot absolute difference between the 2, using BaU as the baseline
plot(TEC$t,abs(CBS_Tr1-CBS_Tr2),type="l",col = '#cb71ff', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
abline(0, 0, lty='dashed')
# plot absolute difference between the 2, using BaU as the baseline
plot(TEC$t,abs(CBS_Tr1-CBS_Tr2),type="l",col = '#cb71ff', lwd=3,
ylab=expression(paste("|CBS| ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
abline(0, 0, lty='dashed')
AGB60*0.482
18.8*0.42
671.15/0.42
# For the utopian scenario
# t=0 represents emissions from clearing eucalyptus and biochar production
# this includes emissions from fuel calculated by Darshi
# COULD BE IMPROVED: it doesn't include CO2 equivalents
fuelC=-2.5 # C Mg ha-1 (one time emission)
smr2=splinefun(TEC$t, c(fuelC+eucClost,diff(TEC$Utopy)))
CBS_Tr_fun=CBSfun(TH=TEC$t,t0,kCO2 = RE1Mg, ha=IRF_PD100, smrfun = smr2)
CBS_Tr2<-sapply(TEC$t, FUN=CBS_Tr_fun)
# plot
plot(TEC$t,CBS_Tr1,type="l",col = '#ff6b35', lwd=3,
ylab=expression(paste("CBS ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
lines(TEC$t,CBS_Tr2,col='#53c98b',lwd=3)
abline(0, 0, lty='dashed')
legend("bottomleft",c("Eucalyptus plantation", "Pakukui agroforestry"),lty=1,col=c('#ff6b35','#53c98b'), lwd=3, bty="n")
# plot absolute difference between the 2, using BaU as the baseline
plot(TEC$t,abs(CBS_Tr1-CBS_Tr2),type="l",col = '#cb71ff', lwd=3,
ylab=expression(paste("|CBS| ("," W ", ha^-1, " yr)")),
xlab="Time horizon (yr)")
abline(0, 0, lty='dashed')
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Respiration from buried bovine skeletal muscle tissue (Stokes et al. 2013)
library(SoilR)
library(FME)
beefDecayStokes2013 <- read.csv("~/GitHub/N196CBS/Data/beefDecayStokes2013.csv")
View(beefDecayStokes2013)
df=na.omit(beefDecayStokes2013[,c(1,7)]) # beef mass loss in C %/d
View(beefDecayStokes2013)
View(df)
# Load function for a single pool model (from Sarquis & Sierra 2023)
onepFit=function(timeSeries, initialCarbon, inipars){
complete=data.frame(time=timeSeries[,1],Ct=timeSeries[,2])
tt=seq(from=0, to=tail(complete[,1],1), length.out = 500)
Func=function(pars){
mod=SoilR::OnepModel(t=tt,k=pars[1], C0=initialCarbon, In=0)
Ct=SoilR::getC(mod)
Rt=SoilR::getReleaseFlux(mod)
return(data.frame(time=tt, Ct=Ct))
}
costFunc=function(pars){
output=Func(pars)
return(modCost(model=output, obs=complete))
}
Fit=modFit(f=costFunc, p=inipars, method="Marq", lower= 0, upper=Inf)
bestMod=Func(pars=Fit$par)
plot(complete, ylim=c(0,1.2*max(complete[,2])))
lines(bestMod)
SoilRmodel=SoilR::OnepModel(t=tt,k=Fit$par[1], C0=initialCarbon, In=0)
return(list(FMEmodel=Fit, SoilRmodel=SoilRmodel, TransitTime=1/(Fit$par)))
}
beefdecay=onepFit(df,1.8, inipars=0.5) # fit the model
# beef decomposition rate (C g/d)
k=beefdecay$FMEmodel$par
View(beefDecayStokes2013)
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Proportion of mass loss from buried bovine skeletal muscle tissue (Stokes et al. 2013)
# Multiplied by 1.8 tons of C in carcasses taken to the landfill each week (9 tons from EPA * 0.2 C content in DeBruyn et al. 2025)
df=na.omit(beefDecayStokes2013[,c(1,6)]) # beef mass loss in tons C/d
beefdecay=onepFit(df,1, inipars=0.5) # fit the model
# beef decomposition rate (C g/d)
k=beefdecay$FMEmodel$par
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Proportion of mass loss from buried bovine skeletal muscle tissue (Stokes et al. 2013)
# Multiplied by 1.8 tons of C in carcasses taken to the landfill each week (9 tons from EPA * 0.2 C content in DeBruyn et al. 2025)
df=na.omit(beefDecayStokes2013[,c(1,4)]) # beef mass loss in tons C/d
beefdecay=onepFit(df,100, inipars=0.5) # fit the model
# beef decomposition rate (C g/d)
k=beefdecay$FMEmodel$par
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Proportion of mass loss from buried bovine skeletal muscle tissue (Stokes et al. 2013)
# Multiplied by 1.8 tons of C in carcasses taken to the landfill each week (9 tons from EPA * 0.2 C content in DeBruyn et al. 2025)
df=na.omit(beefDecayStokes2013[,c(1,7)]) # beef mass loss in tons C/d
beefdecay=onepFit(df,1.8, inipars=0.5) # fit the model
# beef decomposition rate (C g/d)
k=beefdecay$FMEmodel$par
9/.2
9*0.
9*0.2
365/7
# Use k rate from previous model to simulate decomposition at landfill level over 100 years (36500 days)
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
weeks=365/7
yeartons=1.8*weeks
In=1.8*weeks # amount of carcass C per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
# Use k rate from previous model to simulate decomposition at landfill level over 100 years (36500 days)
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
# 1.8 C Mg divided by 7 days in a week
In=1.8/7 # inputs of carcass C per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:36500, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
# Use k rate from previous model to simulate decomposition at landfill level over 100 years (36500 days)
weeks=365/7
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
# 1.8 C Mg divided by 7 days in a week
In=1.8 # inputs of carcass C Mg per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:(weeks*100), k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
getC(KonaBau)
getC(KonaBaU)
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
In=1.8*weeks # inputs of carcass C Mg per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
getC(KonaBaU)
getReleaseFlux(KonaBaU)
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, In, 0)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
getC(KonaBaU)
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
getC(KonaBaU)
getReleaseFlux(KonaBaU)
getC(KonaBaU)
m100=OnepModel(1:100, k, In)
m100=OnepModel(1:100, k, In, 0)
plot(m100)
m99=OnepModel(1:99, k, In, 0)
m98=OnepModel(1:98, k, In, 0)
m97=OnepModel(1:97, k, In, 0)
m96=OnepModel(1:96, k, In, 0)
m95=OnepModel(1:95, k, In, 0)
m94=OnepModel(1:94, k, In, 0)
m93=OnepModel(1:93, k, In, 0)
m92=OnepModel(1:92, k, In, 0)
m91=OnepModel(1:91, k, In, 0)
m90=OnepModel(1:90, k, In, 0)
C100=getC(m100)
C99=c(0, getC(m99))
C100=getC(m100)
C99=c(0, getC(m99))
C98=c(0, 0, getC(m98))
C97=c(0, 0, 0, getC(m97))
C96=c(0, 0, 0, 0, getC(m96))
C95=c(0, 0, 0, 0, 0, getC(m95))
C94=c(0, 0, 0, 0, 0, 0, getC(m94))
C93=c(0, 0, 0, 0, 0, 0, 0, getC(m93))
C92=c(0, 0, 0, 0, 0, 0, 0, 0, getC(m92))
C91=c(0, 0, 0, 0, 0, 0, 0, 0, 0, getC(m91))
C90=c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, getC(m90))
all=sum(C100, C99, C98, C97, C96, C95, C94, C93, C92, C91, C90)
all=rowSums(C100, C99, C98, C97, C96, C95, C94, C93, C92, C91, C90)
all=rowSums(cbind(C100, C99, C98, C97, C96, C95, C94, C93, C92, C91, C90))
head(all)
head(getC(KonaBaU))
?getReleaseFlux
94*1.8
169.2*0.2
100*94/20
470*0.2
470*100/128534
377.6*121
# BUSINESS AS USUAL SCENARIO
# The simulated forest is 60 years old, so we run the simulation starting 60 years from 2025, until 2100
t=seq(1965:2100)
# We use data from Eucalyptus plantations in Hawai'i
# CAN BE IMPROVED: instead of starting with this amount of C, how about constraining the model
# to reach this amount whenever the data were taken
AGB=337.6 # aboveground biomass carbon (tons ha-1) lidar data obtained by Hayley
BGB=mean(c(22.4, 66)) # belowground biomass carbon (tons ha-1) averaged from Reeves 2012 thesis and Selments et al. 2017
377.6+44.2+12
*121
433.8*121
getC(KonaBaU)
5644*.45
<<<<<<< HEAD
library(SoilR)
library(FME)
beefDecayStokes2013 <- read.csv("~/GitHub/N196CBS/Data/beefDecayStokes2013.csv")
View(beefDecayStokes2013)
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Proportion of mass loss from buried bovine skeletal muscle tissue (Stokes et al. 2013)
# Multiplied by 1.8 tons of C in carcasses taken to the landfill each week (9 tons from EPA * 0.2 C content in DeBruyn et al. 2025)
df=na.omit(beefDecayStokes2013[,c(1,7)]) # beef mass loss in tons C/d
# Load function for a single pool model (from Sarquis & Sierra 2023)
onepFit=function(timeSeries, initialCarbon, inipars){
complete=data.frame(time=timeSeries[,1],Ct=timeSeries[,2])
tt=seq(from=0, to=tail(complete[,1],1), length.out = 500)
Func=function(pars){
mod=SoilR::OnepModel(t=tt,k=pars[1], C0=initialCarbon, In=0)
Ct=SoilR::getC(mod)
Rt=SoilR::getReleaseFlux(mod)
return(data.frame(time=tt, Ct=Ct))
}
costFunc=function(pars){
output=Func(pars)
return(modCost(model=output, obs=complete))
}
Fit=modFit(f=costFunc, p=inipars, method="Marq", lower= 0, upper=Inf)
bestMod=Func(pars=Fit$par)
plot(complete, ylim=c(0,1.2*max(complete[,2])))
lines(bestMod)
SoilRmodel=SoilR::OnepModel(t=tt,k=Fit$par[1], C0=initialCarbon, In=0)
return(list(FMEmodel=Fit, SoilRmodel=SoilRmodel, TransitTime=1/(Fit$par)))
}
beefdecay=onepFit(df,1.8, inipars=0.5) # fit the model
# beef decomposition rate
k=beefdecay$FMEmodel$par
# Use k rate from previous model to simulate decomposition at landfill level over 100 years
weeks=365/7 # weeks in a year
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
In=1.8*weeks # inputs of carcass C Mg per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
library(SoilR)
library(FME)
beefDecayStokes2013 <- read.csv("~/GitHub/N196CBS/Data/beefDecayStokes2013.csv")
View(beefDecayStokes2013)
# Kona
# BaU: bovine cadavers are taken from Kulana Foods to the landfill and buried.
# Proportion of mass loss from buried bovine skeletal muscle tissue (Stokes et al. 2013)
# Multiplied by 1.8 tons of C in carcasses taken to the landfill each week (9 tons from EPA * 0.2 C content in DeBruyn et al. 2025)
df=na.omit(beefDecayStokes2013[,c(1,7)]) # beef mass loss in tons C/d
# Load function for a single pool model (from Sarquis & Sierra 2023)
onepFit=function(timeSeries, initialCarbon, inipars){
complete=data.frame(time=timeSeries[,1],Ct=timeSeries[,2])
tt=seq(from=0, to=tail(complete[,1],1), length.out = 500)
Func=function(pars){
mod=SoilR::OnepModel(t=tt,k=pars[1], C0=initialCarbon, In=0)
Ct=SoilR::getC(mod)
Rt=SoilR::getReleaseFlux(mod)
return(data.frame(time=tt, Ct=Ct))
}
costFunc=function(pars){
output=Func(pars)
return(modCost(model=output, obs=complete))
}
Fit=modFit(f=costFunc, p=inipars, method="Marq", lower= 0, upper=Inf)
bestMod=Func(pars=Fit$par)
plot(complete, ylim=c(0,1.2*max(complete[,2])))
lines(bestMod)
SoilRmodel=SoilR::OnepModel(t=tt,k=Fit$par[1], C0=initialCarbon, In=0)
return(list(FMEmodel=Fit, SoilRmodel=SoilRmodel, TransitTime=1/(Fit$par)))
}
beefdecay=onepFit(df,1.8, inipars=0.5) # fit the model
# beef decomposition rate
k=beefdecay$FMEmodel$par
# Use k rate from previous model to simulate decomposition at landfill level over 100 years
weeks=365/7 # weeks in a year
# inputs according to Kulana Foods are around 9 Mg of carcasses per week (1.8 Mg of C)
In=1.8*weeks # inputs of carcass C Mg per year
# start in a landfill without carcasses (C0=0)
KonaBaU=OnepModel(1:100, k, 0, In)
plot(KonaBaU)
plot(getReleaseFlux(KonaBaU))
getC(KonaBaU)
# this is just to corroborate that the model is accurate
m100=OnepModel(1:100, k, In, 0)
=======
# Now calculate CBS (Climate Benefit of Sequestration)
# Radiative efficiency of one MgC in W m-2 (from Joos et al. 2013)
RE1Mg=5.35*(1/389)*(1/2.123e9)
>>>>>>> c3aeabdf96866dbc1155121c4da81f5a3bf5be6f
